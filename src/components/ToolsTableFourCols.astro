---
import data from "../data/oil-types.yaml";

type OilRow = {
  type: string;
  name: string;
  usage: string;
  viscosity_grade: string;
  price: number;
  cylinders: number;
};

const rows = data.properties.rows as OilRow[];

const numberToWords = (num: number): string => {
  const words: Record<number, string> = {
    0: "Zero", 1: "One", 2: "Two", 3: "Three", 4: "Four",
    5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine", 10: "Ten",
  };
  return words[num] ?? num.toString();
};

// Create reverse mapping for sorting word numbers
const wordsToNumber: Record<string, number> = Object.fromEntries(
  Object.entries({
    0: "Zero", 1: "One", 2: "Two", 3: "Three", 4: "Four",
    5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine", 10: "Ten",
  }).map(([num, word]) => [word.toLowerCase(), Number(num)])
);
---

<div style="overflow-x: auto;">
  <table id="oil-table" class="responsive-table">
    <thead>
      <tr>
        <th data-key="type" data-type="text">Type <span class="arrow">▲▼</span></th>
        <th data-key="name" data-type="text">Brand <span class="arrow">▲▼</span></th>
        <th data-key="cylinders" data-type="cylinders">Cylinders <span class="arrow">▲▼</span></th>
        <th data-key="viscosity_grade" data-type="text">Viscosity grade <span class="arrow">▲▼</span></th>
        <th data-key="price" data-type="number">Price <span class="arrow">▲▼</span></th>
      </tr>
    </thead>
    <tbody>
      {rows.map((row) => (
        <tr>
          <td data-label="Type">{row.type}</td>
          <td data-label="Brand">{row.name}</td>
          <td data-label="Cylinders">{numberToWords(row.cylinders)}-cylinder engines</td>
          <td data-label="Viscosity grade">{row.viscosity_grade}</td>
          <td data-label="Price">${row.price.toFixed(2)}</td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

<style>
  thead th {
    user-select: none;
    position: relative;
    background-color: #3498db;
    cursor: pointer;
    text-align: left;
    padding: 8px;
  }
  tbody td {
    padding: 8px;
    border-top: 1px solid #ddd;
  }
  .arrow { font-size: 0.8em; margin-left: 4px; opacity: 0.6; }
  thead th.active { background-color: #2a80b9; }
  thead th.active.asc .arrow { opacity: 1; color: yellow; }
  thead th.active.desc .arrow { opacity: 1; color: yellow; transform: rotate(180deg); display: inline-block; }

  /* Mobile styles */
  @media (max-width: 768px) {
    table.responsive-table thead {
      display: none;
    }
    table.responsive-table,
    table.responsive-table tbody,
    table.responsive-table tr,
    table.responsive-table td {
      display: block;
      width: 100%;
    }
    table.responsive-table tr {
      margin-bottom: 1rem;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 8px;
      background: #f9f9f9;
    }
    table.responsive-table td {
      text-align: left;
      padding: 6px 8px;
      border: none;
      position: relative;
    }
    table.responsive-table td::before {
      content: attr(data-label);
      font-weight: bold;
      display: block;
      margin-bottom: 2px;
      color: #333;
    }
  }
</style>

<script>
  const table = document.getElementById("oil-table");
  const headers = table.querySelectorAll("th");
  let sortConfig = { key: null, direction: "asc" };

  const wordsToNumber = {
    zero:0, one:1, two:2, three:3, four:4, five:5,
    six:6, seven:7, eight:8, nine:9, ten:10
  };

  headers.forEach((header, index) => {
    header.addEventListener("click", () => {
      const key = header.dataset.key;
      const type = header.dataset.type;
      const tbody = table.querySelector("tbody");
      const rows = Array.from(tbody.querySelectorAll("tr"));

      let direction = "asc";
      if (sortConfig.key === key && sortConfig.direction === "asc") {
        direction = "desc";
      }
      sortConfig = { key, direction };

      rows.sort((a, b) => {
        let aValue = a.children[index].innerText.trim();
        let bValue = b.children[index].innerText.trim();

        if (type === "number") {
          const numA = parseFloat(aValue.replace(/[^0-9.]/g, "")) || 0;
          const numB = parseFloat(bValue.replace(/[^0-9.]/g, "")) || 0;
          return direction === "asc" ? numA - numB : numB - numA;
        }

        if (type === "cylinders") {
          const wordA = aValue.split("-")[0].toLowerCase();
          const wordB = bValue.split("-")[0].toLowerCase();
          const numA = wordsToNumber[wordA] || 0;
          const numB = wordsToNumber[wordB] || 0;
          return direction === "asc" ? numA - numB : numB - numA;
        }

        return direction === "asc"
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      });

      tbody.innerHTML = "";
      rows.forEach(row => tbody.appendChild(row));

      headers.forEach(h => h.classList.remove("active", "asc", "desc"));
      header.classList.add("active", direction);
    });
  });
</script>
